function returnSomethingOne(value) {
    return { a: value };
};

console.log(returnSomethingOne(1));

/*Запись дальше объявляет функцию, которая работает аналогично предыдущей.
Такую запись можно использовать если функция только возвращает какой-то объект.*/
const returnSomethingTwo = (value) => ({
    a: value
});

console.log(returnSomethingTwo(2));

/*-------------------------------------------------------------------------------------------------------------------*/

let a = 10;
let b = { a: a };
console.log(b);

let c = 20;
let d = { c }; // это тоже самое, что и "let d = { c: c };"
console.log(d);

/*-------------------------------------------------------------------------------------------------------------------*/

/*Если бы у нас был очень большой объект и мы использовали внутри массив объектов, то при поиске какого-то подобъекта
это занимало бы много времени, так как приходилось бы перебирать все подобъекты и проверять у них свойство "id".
Используя же ассоциотивный массив мы можем обращаться к свойствам этого массива более удобным образом, не перебирая все
элементы.*/
let f = {
    '1': { id: 1 },
    '2': { id: 2 },
    '3': { id: 3 },
    '4': { id: 4 },
    '5': { id: 5 }
};

console.log(f['1']);
console.log(f[3]);
console.log(f['5']);

/*-------------------------------------------------------------------------------------------------------------------*/

var x = 3;
var g = x++; /* сначала вернется текущее значение "x", то есть "3", которое присвоится "g", а затем "x"
увеличится на 1.*/
console.log(g); // 3
console.log(x); // 4

var h = ++x; /* сначала "x" увеличится на 1, затем вернется увеличенное значение "x", то есть "5", которое
присвоится "h".*/
console.log(h); // 5
console.log(x); // 5

/*Сначала срабатывает оператор сложения, который слева берет текущее значение "x", то есть "5". Справа вернется тоже
текущее значение "x", то есть "5", но операция сложения "5 + 5" еще не произойдет, так как затем текущее значение "x"
увеличится на 1, то есть "x" станет равен "6". Затем складываются "5 + 5" в "10", что затем присваивается "x".*/
x += x++; // это тоже самое, что и "x = x + x++;"
console.log(x); // 10

/*Сначала срабатывает оператор сложения, который слева берет текущее значение "x", то есть "10". Справа вернется тоже
текущее значение "x", то есть "10", но операция сложения "10 + 10" еще не произойдет, так как затем текущее значение "x"
увеличится на 1, то есть "x" станет равен "11". Затем складываются "10 + 10" в "20", что затем присваивается "i".*/
var i = x + x++;
console.log(i); // 20
console.log(x); // 11

/*Сначала срабатывает оператор сложения, который слева берет текущее значение "x", то есть "11". Справа берется текущее
значение "x", то есть "11", затем увеличится на 1, то есть "x" станет равен "12", и это "12" встает справа. Затем
складываются "11 + 12" в "23", что затем присваивается "x".*/
x += ++x; // это тоже самое, что и "x = x + ++x;"
console.log(x); // 23

/*Сначала срабатывает оператор сложения, который слева берет текущее значение "x", то есть "23". Справа берется текущее
значение "x", то есть "23", затем увеличится на 1, то есть "x" станет равен "24", и это "24" встает справа. Затем
складываются "23 + 24" в "47", что затем присваивается "j".*/
var j = x + ++x;
console.log(j); // 47
console.log(x); // 24

/*
1. Срабатывает оператор сложения.
2. Ему нужны два параметра слева и справа.
3. Получаем параметр слева: возвращается текущее значение "k", то есть "2", что и будет параметром справа. Затем 
само "k" увеличивается на 1 и становится "3".
4. Получаем параметр справа.
5. Справа срабатывает оператор умножения, которому нужны два параметра слева и справа.
6. Получаем параметр слева для оператора умножения: берем текущее значение "k", то есть "3" и уменьшаем на 1,
получая "2". То есть "k" становится равен "2" и это "2" становится параметром слева для оператора умножения.
7. Получаем параметр справа для оператора умножения: берем текущее значение "k", то есть "2" и увеличиваем на 1,
получая "3". То есть "k" становится равен "3" и это "3" становится параметром справа для оператора умножения.
8. Умножаем "2 * 3" и получаем "6", что затем возвращается в качестве параметра справа для оператора сложения.
9. Складываем "2 + 6" и получаем "8", что присваивается "l".
*/
var k = 2;
var l = k++ + (--k * ++k);
console.log(l); // 8
console.log(k); // 3

var m = 2;
var n = m++ + m++;
console.log(n); // 5
console.log(m); // 4

var o = 2;
var p = ++o + o++;
console.log(p); // 6
console.log(o); // 4

var q = 0;
var r = ++q + ++q;
console.log(r); // 3
console.log(q); // 2

var s = 0;
function increaseSOne() {
    s++;
    return s;
};
console.log(increaseSOne()); // 1
console.log(increaseSOne()); // 2 
console.log(increaseSOne()); // 3

function increaseSTwo() {    
    return s++;
};
console.log(increaseSTwo()); // 3
console.log(increaseSTwo()); // 4 
console.log(increaseSTwo()); // 5

function count(b) {
    console.log(b);
};
var t = 0;
count(++t); // 1
count(t); // 1
count(t++); // 1
console.log(t); // 2