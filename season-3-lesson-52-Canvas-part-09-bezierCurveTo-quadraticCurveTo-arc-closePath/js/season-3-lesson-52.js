const canvas = document.getElementsByClassName('canvas-one')[0];
const ctx = canvas.getContext('2d');

/*-------------------------------------------------------------------------------------------------------------*/

ctx.beginPath();
ctx.moveTo(50, 20);

/*Метод "bezierCurveTo()" добавляет кубическую кривую Безье к текущему подпути. Для построения требуются три точки. 
Первые две точки являются контрольными, а третья - конечной. Начальной точкой является последняя точка в текущем 
подпути, и она может быть изменена методом "moveTo()" перед созданием кривой Безье.*/
ctx.bezierCurveTo(230, 30, 150, 60, 50, 100);

ctx.stroke();

ctx.fillStyle = 'blue';
ctx.fillRect(50, 20, 10, 10); // начальная точка
ctx.fillRect(50, 100, 10, 10); // конечная точка

ctx.fillStyle = 'red';
ctx.fillRect(230, 30, 10, 10); // первая контрольная точка
ctx.fillRect(150, 60, 10, 10); // вторая контрольная точка

/*-------------------------------------------------------------------------------------------------------------*/

ctx.beginPath();
ctx.moveTo(50, 220);

/*Метод "quadraticCurveTo()" добавляет квадратичную кривую Безье к текущему подпути. Требуются две точки: первая 
— контрольная, а вторая — конечная. Начальная точка — это последняя точка на текущем подпути, которую можно 
изменить с помощью метода "moveTo()" перед созданием квадратичной кривой Безье.*/
ctx.quadraticCurveTo(230, 230, 50, 300);

ctx.stroke();

ctx.fillStyle = 'blue';
ctx.beginPath();

/*Метод "arc()" создает дугу/кривую (используется для создания окружностей или их части). Первыми двумя
параметрами принимает координаты, где нужно отрисовать дугу или кривую. Третьим параметром принимает радиус
круга. Четвертым и пятым параметрами принимает начальный и конечный углы. Чтобы создать круг при помощи этого 
метода, нужно установить начальный угол в "0", а конечный угол в "2 * Math.PI". Последний параметр необязательный,
он определяет, как рисовать окружность, по часовой стрелке или против часовой стрелки. По умолчанию установлено 
значение false, что означает по часовой стрелке. Значение true указывает направление против часовой стрелки.*/
ctx.arc(50, 220, 5, 0, 2 * Math.PI); // начальная точка
ctx.arc(50, 300, 5, 0, 2 * Math.PI); // конечная точка
ctx.fill();

ctx.fillStyle = 'red';
ctx.beginPath();
ctx.arc(230, 230, 5, 0, 2 * Math.PI); // контрольная точка
ctx.fill();

/*-------------------------------------------------------------------------------------------------------------*/

ctx.beginPath();
ctx.moveTo(20, 540);
ctx.lineTo(120, 410);
ctx.lineTo(220, 540);

/*Метод "closePath()" делает попытку добавить прямую линию от текущей точки до первоначальной точки текущего 
подпути и закрывает сам путь (давая возможность инициализировать новый). Если путь пустой или содержит одну 
точку, этот метод ничего не делает.*/
ctx.closePath();

ctx.stroke();