/*Современной SPA работает примерно следующим образом. На серверной стороне имеется 2 сервера. Один маленький,
другой большой. При первом запросе из нашего бразура мы получаем от маленького сервера SPA, то есть это 
небольшое количество HTML и CSS с большим количеством JS. Этот маленький сервер называется "static server".
Для статического сервера можно использовать "nginx". Получив SPA далее мы делаем запросы уже на большой сервер 
на запрос или изменение данных. На большом сервере может хранится большое количество данных. Этот большой сервер 
называется "API server". Для API сервера используется "REST API" и "graphQL".*/

/*В случае SSR будет использоваться один большой сервер, которому придется на каждый запрос генерировать
много HTML и CSS.*/

/*Для поисковых систем важно, чтобы при первом запросе возвращался HTML, чтобы сайт индексировался и поисковики
могли с ним работать.*/

/*В SSR часто запрашиваемые страницы можно кешировать, чтобы сэкономить на постоянных запросах к БД.*/

/*Ранее SSR был монолитным и на одном сервере выполнялась вся работа по генерированию страниц. Современный SSR
ничего не знает про БД и не выполняет генерирование страниц. Современный SSR в ответ на запрос отправляет
немного HTML и много JS, чтобы клиент у себя сам отрисовал SPA. Уже далее клиент общается через SPA с API
сервером, имеющим бизнес-логику и доступ к БД.*/

/*"NodeJS", как и бразуры, является отдельной программой, требующей установки. "NodeJS" позволяет работать с 
базой данных, файловой системой, операционной системой и так далее. Что браузеры, что "NodeJS" используют JS 
(движок "V8"). Но у браузеров своя цель, а у "NodeJS" своя. Поэтому браузеры дополняют JS своими особенностями - 
DOM, события и так далее. "NodeJS" дополняет JS другими инструментами для работы с БД, ФС, ОС и так далее. Но 
в итоге и браузеры, и "NodeJS" выполняют и интерпретируют JS. "NodeJS", например, можно добавить в микроконтроллер, 
написать программу на JS, которая в итоге будет обслуживать какую-нибудь технику. Также на "NodeJS" можно написать 
программу, которая будет перехватывать HTTP-запросы от клиента, формировать ответ и отправлять его клиенту. То 
есть на "NodeJS" можно сделать HTTP-сервер. Поэтому "NodeJS" часто называют серверным JS. Также современные 
программы для браузеров могут быть очень сложными, они могут быть написаны в одном формате, а затем могут быть 
конвертированы в другой формат (например, LESS компилируется в CSS, JSX компилируется в JS, склевание бандлов 
JS-файлов, склеивание картинок и спрайтов, и так далее). То есть прежде чем отдать нашу программу мы можем сделать 
очень много вспомогательных операций. Также "NodeJS" позволяет писать приложение, которое бы само перезагружалось 
при добавлении изменений в программу в редакторе. И поэтому для "NodeJS" написано огромное количество программ 
(пакеты или модули), помогающих выполнять эти вспомогательные операции и автоматизирующих их. Для управления 
пакетами для "NodeJS" есть программа "Node Package Manager" (NPM). NPM идет вместе с "NodeJS". Для запуска же 
этих пакетов есть программа "NPX".*/

/*В CSS нужно стараться указывать максимально возможную вложенность.*/