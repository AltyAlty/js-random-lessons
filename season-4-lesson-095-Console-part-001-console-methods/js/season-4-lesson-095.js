'use strict';

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.assert()" первым параметром принимает булево значение. Если это значение равно true, то ничего не
происходит, а если false, то выводится сообщение об ошибке вместе с остальными параметрами, которые будут указаны
через пробел.*/
let assertion01 = 1 === 2;

console.assert(assertion01); // 'Assertion failed: console.assert'
console.assert(assertion01, 3); // 'Assertion failed: 3'
console.assert(assertion01, 3, 4); // 'Assertion failed: 3 4'
console.assert(assertion01, 'a', 'b'); // 'Assertion failed: a b'

/*В методах консоли можно использовать строки подстановки:
1) "%o" выводит объект JavaScript в стиле "оптимально полезного форматирования", например, элементы DOM могут 
отображаться так же, как они будут выглядеть в инспекторе элементов.
2) "%O" выводит объект JavaScript в стиле "общего форматирования объектов JavaScript", обычно в форме расширяемого
дерева.
3) "%d" и "%i" выводят целое число.
4) "%s" выводит строку.
5) "%f" выводит значение с плавающей точкой.
6) "%c" применяет правила стиля CSS ко всему последующему тексту.*/
let element01 = document.createElement('div');
let obj01 = { a: { b: 2 } };
console.assert(assertion01, 'this is %o', element01); // Assertion failed: this is <div></div>
console.assert(assertion01, 'this is %O', obj01); // Assertion failed: this is Object

console.assert(assertion01, 'this is %O', element01); // Assertion failed: this is div
console.assert(assertion01, 'this is %o', obj01); // Assertion failed: this is { a: {…} }

let number01 = 5;
console.assert(assertion01, 'this is %d', number01); // 'Assertion failed: this is 5'
console.assert(assertion01, 'this is %i', number01); // 'Assertion failed: this is 5'

let string01 = 'abc';
console.assert(assertion01, 'this is %s', string01); // 'Assertion failed: this is abc'

let float01 = 43.12;
console.assert(assertion01, 'this is %f', float01); // 'Assertion failed: this is 43.120000'
console.assert(assertion01, 'this is %f', number01); // 'Assertion failed: this is 5.000000'

console.assert(assertion01,
    "This is %ca cool message",
    "color: yellow; font-style: italic; background-color: blue;padding: 2px",
);

console.assert(assertion01, '%o and %O and %i and %s and %f', element01, obj01, number01, string01, float01); // Assertion failed: <div></div> and Object and 5 and abc and 43.120000

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.clear()" очищает консоль, если это возможно.*/
// console.clear(); // Консоль была очищена.

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.count()" регистрирует количество вызовов данного конкретного метода "console.count()". В качестве
параметра может приниматься строка, обозначающая какой-то уникальный вызов метода.*/
console.count(); // 'default: 1'
console.count(); // 'default: 1'
console.count(); // default: 1'
console.count('a'); // 'a: 1'
console.count('a'); // 'a: 2'

/*Метод "console.countReset()" сбрасывает счетчик, используемый с методом "console.count()".*/
console.countReset('a');
console.count('a'); // 'a: 1'

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.debug()" выводит сообщение в консоль на уровне журнала "Отладка".*/
console.debug('debug'); // 'debug', видно только в режиме отладки

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.dir()" отображает список свойств указанного объекта. В консолях браузера вывод представлен в виде
иерархического списка с раскрывающими треугольниками, которые позволяют вам видеть содержимое дочерних объектов.*/
console.dir(obj01); // Object
console.log(obj01); // {a: {…}}

console.dir(element01); // div
console.log(element01); // <div></div>

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.dirxml()" отображает интерактивное дерево элементов-потомков указанного элемента XML/HTML. Если его
невозможно отобразить как элемент, вместо него отображается представление объекта JavaScript. Вывод представлен в виде
иерархического списка расширяемых узлов, позволяющих просматривать содержимое дочерних узлов.*/
let XMLElement01 = document.implementation.createDocument(null, 'abc');
console.dirxml(XMLElement01); // #document ((unknown))
console.dirxml(element01); // <div></div>
console.dirxml(obj01); // {a: {…}}

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.error()" выводит сообщение в консоль на уровне журнала "Ошибки".*/
console.error('error'); // 'error', видно только в режиме "ошибки"

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.group()" создает новую встроенную группу в консоли, в результате чего все последующие сообщения 
консоли будут отступать на дополнительный уровень, пока не будет вызван метод "console.groupEnd()".*/
console.group('Group 01');
console.log('001');

console.group('Group 02');
console.log('002');
console.log('003');
console.groupEnd();

console.log('004');
console.groupEnd();

console.log('005');

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.groupCollapsed()" создает новую встроенную группу в консоли. Однако, в отличие от метода 
"console.group()", новая группа создается свернутой.*/
console.groupCollapsed('Group 01');
console.log('001');

console.groupCollapsed('Group 02');
console.log('002');
console.log('003');
console.groupEnd();

console.log('004');
console.groupEnd();

console.log('005');

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.info()" выводит сообщение в консоль на уровне журнала "Инфо".*/
console.info('info'); // 'info', видно только в режиме "инфо"

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.profile()" начинает запись профиля производительности. Чтобы остановить запись, вызовите метод 
"console.profileEnd()". Поддерживается не везде.*/
// console.profile('profile01'); // 'Profile 'profile01' started.'

// await new Promise((resolve) => { setTimeout(() => { resolve() }, 3000); });

// console.profileEnd('profile01'); // 'Profile 'profile01' finished.'

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.table()" отображает табличные данные в виде таблицы. В качестве второго опционального параметра может
прнимать массив, который можно использовать для ограничения столбцов, показанных в таблице. Он содержит индексы, если
каждая запись данных является массивом, или имена свойств, если каждая запись данных является объектом. Результирующая
таблица затем включает только столбцы для элементов, которые соответствуют заданным индексам или именам.*/
let obj02 = {
    a: {
        b: 2
    },

    c: 'Hello',

    d: {
        e: [
            3,
            3,
            {
                f: 4
            }
        ]
    }
};

console.table(obj02);
console.table(obj02, ['b']);

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.time()" запускает таймер, который можно использовать для отслеживания длительности операции. Каждому
таймеру присваивается уникальное имя, и на данной странице может быть запущено до 10 000 таймеров. При вызове метода 
"console.timeEnd()" с тем же именем браузер выведет время в миллисекундах, прошедшее с момента запуска таймера. Чтобы
остановить таймер и вывести время в консоль используйте метод "console.timeEnd()".

Метод "console.timeLog()" регистрирует текущее значение таймера, который был ранее запущен путем вызова метода 
"console.time()". Вторым опцианальным параметром можно указать дополнительные значения, которые будут выведены в 
консоль после вывода таймера.*/
console.time('time01');
for (let i = 0; i < 300000; i++) { };
console.timeLog('time01', 666);
for (let i = 0; i < 300000; i++) { };
console.timeEnd('time01');

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.timeStamp()" добавляет один маркер в инструмент производительности браузера. Это позволяет вам 
сопоставлять точку в вашем коде с другими событиями, записанными на временной шкале, такими как события макета и 
отрисовки. Можно дополнительно указать аргумент для маркировки временной метки, и эта метка будет отображаться рядом
с маркером.*/
console.timeStamp('profile01TimeStamp');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.trace()" выводит трассировку стека в консоль. Опционально может принимать ноль или более объектов для
вывода в консоль вместе с трассировкой.*/
function func01() {
    function func02() { console.trace({ a: 1 }) };
    func02();
};

func01();

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "console.warn()" выводит предупреждающее сообщение на консоль на уровне журнала "Предупреждения".*/
console.warn('warning'); // 'warning'