* {
    margin: 0;
    padding: 0;
}

.first-example,
.second-example,
.third-example,
.fourth-example,
.fifth-example {
    margin-bottom: 200px;
}

/*-------------------------------------------------------------------------------------------------------------*/

/*Свойство "position" указывает, как элемент позиционируется в документе. Свойства "top", "right", "bottom" и 
"left" определяют конечное местоположение позиционированных элементов. Значением по умолчанию для свойства
"position" является "static". Свойства "top", "right", "bottom" и "left" при таком значении ничего не делают.
Стандартное поведение блочных элементов это занять всю строку и позволить другим элементам быть уже только на 
предыдущей или следующей строке.*/
.first-div {
    width: 300px;
    height: 500px;
    border: 1px red solid;
    margin-bottom: 100px;
    position: static;
}

.second-div {
    width: 100px;
    height: 100px;
    border: 1px green solid;
    top: 50px;
    position: static;
}

.third-div {
    width: 100px;
    height: 100px;
    border: 1px blue solid;
    left: 50px;
    position: static;
}

/*-------------------------------------------------------------------------------------------------------------*/

.fourth-div {
    width: 300px;
    height: 500px;
    border: 1px red solid;
    margin-bottom: 100px;
    position: static;
}

.fifth-div {
    width: 100px;
    height: 100px;
    border: 1px green solid;
    position: static;
}

/*Значение "relative" для свойства "position" позволяет позиционировать элемент относительно его стандартной
статической позиции. Свойства "top", "right", "bottom" и "left" при таком значении сдвигают элемент. Смещение 
не влияет на положение любых других элементов; таким образом, пространство, заданное для элемента в макете 
страницы, такое же, как если бы позиция была "static".*/
.sixth-div {
    width: 100px;
    height: 100px;
    border: 1px blue solid;
    top: 10px;
    right: 20px;
    bottom: 30px;
    left: 40px;
    position: relative;
}

.seventh-div {
    width: 100px;
    height: 100px;
    border: 1px violet solid;
    position: static;
}

/*-------------------------------------------------------------------------------------------------------------*/

.eighth-div {
    width: 300px;
    height: 500px;
    border: 1px red solid;
    margin-bottom: 100px;
    position: static;
}

/*Значение "absolute" для свойства "position" позволяет делать так, чтобы все другие элементы на странице его
игнорировали. Свойства "top", "right", "bottom" и "left" при таком значении сдвигают элемент. Если родительский
элеменет является "static" или родителя нет, то элемент будет высчитывать свою позицию от левого верхнего угла 
страницы. Если же родительский элемент не является "static", то позиция будет высчитываться от левого верхнего
угла родителя.*/
.ninth-div {
    width: 100px;
    height: 100px;
    border: 1px rgb(255, 196, 0) solid;
    top: 10px;
    right: 20px;
    bottom: 30px;
    left: 90px;
    position: absolute;
}

.tenth-div {
    width: 300px;
    height: 500px;
    border: 1px red solid;
    margin-bottom: 100px;
    position: relative;
}

.eleventh-div {
    width: 100px;
    height: 100px;
    border: 1px rgb(255, 196, 0) solid;
    top: 10px;
    right: 20px;
    bottom: 30px;
    left: 90px;
    position: absolute;
}

/*-------------------------------------------------------------------------------------------------------------*/

/*Значение "fixed" для свойства "position" ведет себя почти также как и значение "absolute", но в отличии от него
привязывает элемент к какой-то точке на экране, которая указывается при помощи свойств "top", "right", "bottom" 
и "left", и не этот элемент не меняет своего положения при скроллинге странице.*/
.twelfth-div {
    width: 300px;
    height: 500px;
    border: 1px red solid;
    margin-bottom: 100px;
    position: static;
}

.thirteenth-div {
    width: 100px;
    height: 100px;
    border: 1px blue solid;
    margin-bottom: 100px;
    position: fixed;
    top: 200px;
    left: 400px;
}

/*-------------------------------------------------------------------------------------------------------------*/

.fourteenth-div {
    width: 6000px;
    height: 8000px;
    border: 1px red solid;
    margin-bottom: 100px;
    position: static;
}

.fifteenth-div {
    width: 100px;
    height: 100px;
    border: 1px green solid;
    position: static;
    margin-left: 500px;
    margin-bottom: 20px;
}

/*Значение "sticky" для свойства "position" делает следующее. Такой элемент, находясь внутри родительского
контейнера, теперь будет прилипать либо к сторонам своего родителя, либо сторонам экрана, когда мы совершаем
прокрутку экрана. Причем этот элемент создает на своем оригинальном месте занятое пространство, даже когда 
он сам меняет свое положение. Если при прокрутке страницы вниз мы начинаем видеть верхную сторону родительского 
элемента этого sticky элемента, то этот sticky элемент прилипает к этой верхней стороне. Если мы дальше 
прокручиваем страницу вниз до тех пор, пока этот sticky элемент, не становится нам полностью видимым, то 
этот sticky элемент начинает вести себя как fixed элемент, то есть движется вместе с нашей прокруткой. Если мы 
прокручиваем вниз дальше до оригинального положения этого sticky элемента, то этот sticky элемент остается на 
своей оригинальной позиции, то есть начинает вести себя как static элемент. Если мы дальше продолжаем 
прокручивать вниз до тех пор, пока sticky элемент не сталкивается с верхней частью экрана, то он снова начинает 
вести себя как fixed элемент и снова движется вместе с нашей прокруткой, тем самым прилипнув к верхней части 
экрана. Если мы прокручиваем дальше вниз до момента, когда этот sticky элемент начинает соприкасаться с нижней 
стороной своего родительского элемента, то этот sticky элемент прилипает к этой стороне и начинает вести
себя как static элемент. Если мы далее прокручиваем вниз, то по мере исчезновения родительского элемента с нашего
экрана начинает вместе с ним и исчезать наш sticky элемент. Если после того, как мы прокрутим вниз, чтобы полностью
не видеть этот sticky элемент, и начнем прокручивать обратно вверх, то как только мы снова увидим нижную сторону
родительского элемента, этот sticky элемент к ней прилипнет и начнет себя вести как static элемент. Если мы
дальше начнет прокручивать вверх до того момента, когда полностью увидим этот sticky элемент, то он начнет вести
себя как fixed и будет двигаться вместе с нашей прокруткой вверх. Если продолжим дальше прокручивать вверх до того
момента, когда этот sticky элемент окажется на своей оригинальной позиции, то этот sticky элемент останется на
этой позиции и начнет вести себя как static элемент. Если мы дальше будем прокручивать вверх до тех пор, пока
этот sticky элемент не коснется нижней стороны экрана, то он прилипнет к этой стороне и начнет вести себя как
fixed элемент, двигаясь вместе с нашей прокруткой вверх. Если мы продолжим прокручивать вверх до того момента,
когда этот sticky элемент коснет верхней стороны своего родительского элемента, то он прилипнет к этой стороне
и начнет себя вести как static элемент. Если мы продолжим прокручивать страницу вверх, то по мере исчезновения
с экрана родительского элемента, будет исчезать и наш sticky элемент.

Аналогично sticky элемент работает и при прокрутке вправо/влево.

При помощи свойств "top", "right", "bottom" и "left" можно указать как должен сместиться sticky элемент, когда
он касается одну из сторон экрана.*/
.sixteenth-div {
    width: 100px;
    height: 100px;
    border: 1px rgb(255, 136, 0) solid;
    margin-left: 500px;
    position: sticky;
    top: 50px;
    right: 50px;
    bottom: 50px;
    left: 50px;
}

.seventeenth-div {
    width: 100px;
    height: 100px;
    border: 1px green solid;
    position: static;
    margin-left: 500px;
    margin-top: 20px;
}

.eighteenth-div {
    width: 300px;
    height: 8000px;
    border: 1px red solid;
    margin-bottom: 100px;
    position: static;
}