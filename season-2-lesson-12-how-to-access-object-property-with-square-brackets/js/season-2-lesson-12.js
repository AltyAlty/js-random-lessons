class Pig { /*Создали класс с конструктором внутри.*/
    constructor(id, name) {
        this.id = id;
        this.name = name;
    }
};

var id = 1;

var pig1 = new Pig(id, 'kek'); /*Создали объект "pig1" на основе класса "Pig".*/

console.log('isFat before is ' + pig1.isFat); /*Такого свойства "isFat" у объекта "pig1" нет. 
Выведет "undefined".*/

pig1.isFat = true; /*Таким образом динамически создали свойство "isFat" для объекта "pig1".*/

console.log('isFat after is ' + pig1.isFat); /*Выведет "true".*/

/*-----------------------------------------------------------------------------------------------*/

console.log('Property [name] is ' + pig1['name']); /*Так можно обращаться к свойствам объекта. Также 
это позволяет обходить ограничения при создании имен свойств.*/

pig1['4x = 12abc'] = 'lol'; /*Создали динамически свойство, которое начинается с цифры и содержит 
пробелы, для объекта "pig1".*/

console.log('Property [4x = 12abc] is ' + pig1['4x = 12abc']); /*Выведет "lol".*/

/*-----------------------------------------------------------------------------------------------*/

pig1.piggiesCount = 0;

document.querySelector('button#add1').onclick = (e) => { /*Находим кнопку с идентификатором "add1".*/
    id++;
    pig1['piggy' + pig1.piggiesCount] = new Pig(id, 'child'); /*Таким образом будет добавлять
    к объекту "pig1" свойства, имена которых будут "piggy1", "piggy2", "piggy3" и так далее.*/
    pig1.piggiesCount++;
    console.log(pig1);
};

/*-----------------------------------------------------------------------------------------------*/

var id2 = 1;

var pig2 = new Pig(id2, 'kok'); /*Создали объект "pig2" на основе класса "Pig".*/

pig2.piggiesCount = 0;

document.querySelector('button#add2').onclick = (e) => { /*Находим кнопку с идентификатором "add2".*/
    id2++;
    pig2[pig2.piggiesCount] = new Pig(id2, 'child'); /*Указали свойство в виде числа. Аналогично 
    можно было в конструкторе указать "this[0] = ..." и так далее. В итоге будут создаваться
    свойства в объекте "pig2", названия которых состоят из чисел по порядку.*/
    pig2.piggiesCount++;
    console.log(pig2);
};

document.querySelector('button#get2').onclick = (e) => { /*Находим кнопку с идентификатором "get2".*/
    for (let i = 0; i < pig2.piggiesCount; i++) { /*Будем пробегаться по всем свойствам
        объекта "pig2", имена которых являются цифры по порядку, и отображать их в консоли.*/
        console.log(pig2[i]);
    };
};

document.querySelector('button#del2').onclick = (e) => { /*Находим кнопку с идентификатором "del2".*/
    for (let i = 0; i < pig2.piggiesCount; i++) { /*Будем пробегаться по всем свойствам
        объекта "pig2", имена которых являются цифры по порядку, и удалять их.*/
        delete pig2[i];
    };
};

/*-----------------------------------------------------------------------------------------------*/

var id3 = 1;

var pig3 = new Pig(id3, 'kak'); /*Создали объект "pig2" на основе конструктора "Pig".*/

pig3.piggiesCount = 0;

document.querySelector('button#add3').onclick = (e) => { /*Находим кнопку с идентификатором "add3".*/
    id3++;
    var inputValue = document.querySelector('input').value; /*Берем значение, которое ввели в элемент
    "input".*/
    pig3[inputValue] = new Pig(id3, 'child'); /*Создаем свойство в объекте "pig3", имя которого будет
    браться из значения элемента "input".*/
    pig3.piggiesCount++;
    console.log(pig3);
};

/*-----------------------------------------------------------------------------------------------*/

console.log(window['4 add ']); /*В разметке есть кнопка с идентификатором "4 add ", начинающимся
с цифры и содержащим пробелы. Таким способом мы можем обратиться к такому идентификатору.*/