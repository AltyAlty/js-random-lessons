/*Для использования Flexbox нужен родительский элемент для flex элементов, некий flex контейнер. Для того, чтобы
создать такой контейнер, нужно использовать свойство "display" со значение "flex" для block flex или со 
значением "inline-flex" для inline flex.

Когда элементы выложены как flex элементы, они располагаются вдоль двух осей. Главная ось (main axis) проходит в 
том направлении, вдоль которого расположены flex элементы (например, в строку слева направо или вдоль колонок 
сверху вниз). Начало и конец этой оси называются "main start" и "main end". Поперечная ось (cross axis) проходит 
перпендикулярно flex элементам. Начало и конец этой оси называются "cross start" and "cross end".

Свойство " flex-direction" определяет направление главной оси. По умолчанию это свойство имеет значение "row",
то есть располагает дочерние элементы в ряд слева направо (для большинства языков) или справа налево (для 
арабских языков). Значение "column" расположит flex элементы в столбец сверху вниз. Значения "row-reverse" и
"column-reverse" работают как и "row" c "column", но распологают flex элементы в обратном порядке и с
противоположной стороны.

Если для flex контейнера заданы фиксированные ширина и высота и если у нас flex элементы будут занимать
больше места, чем предоставлено flex контейнером, то эти flex элементы будут выходить за границы flex
контейнера. Если в flex контейнере установить свойство "flex-wrap" со значением "wrap", то все flex элементы, 
которые не помещаются, перенесутся на следующую строку, чтобы не было переполнения. Если же установлено
свойство "flex-wrap" со значением "wrap" и все flex элементы убираются в предоставленное flex контейнером
пространство, тогда каждый flex элемент будет стараться занимать все строку, что приведет к тому, что flex
элементы станут расположены в столбец сверху вниз. Значение "nowrap" установлено по умолчанию. Значение
"wrap-reverse" ведет себя так же, как и значение "wrap", но оси будут инвертированы.

Свойство "flex-flow" комбинирует свойства "flex-direction" и "flex-wrap", например, "flex-flow: row wrap;".

Свойство "flex" позволяет указать безразмерное значение пропорции, указывающее сколько свободного пространства 
на главной оси каждый flex элемент сможет занять. Значение "1" установит, что flex элементы будут занимать равное 
количество свободного места в контейнере, которое осталось после установки свойств "padding" и "margin". Это 
свойство указывается во flex элементах. Используя псевдо-класс ":nth-of-type()" можно найти один или более 
элементов с заданным тегом, основываясь на их позиции среди группы соседних элементов, и после этого указать
свойство "flex", например, со значением "2", тогла получится так, что наши три flex элемента суммарно делят
контейнер на 4 части (1 + 1 + 2). Свойство "flex" также может принимать два значения, в которых второе будет
указывать минимальный размер flex элемента, например "flex: 1 200px;".

Ценность Flexbox можно увидеть в его гибкости/отзывчивости - если изменить размер окна или добавить 
еще flex элемент, то макет будет и дальше выглядеть также хорошо.

Свойство "flex" комбинирует в себе работу свойств "flex-grow", "flex-shrink" и "flex-basis".
Свойство "flex-grow" устанавливает значение пропорции, которое занимает flex элемент.
Свойство "flex-shrink" вступает в роль, когда flex элементы переполняют контейнер. Оно указывает, сколько 
забирается от размера каждого flex элемента, чтобы он перестал переполнять контейнер.
Свойство "flex-basis" устанавливает значение минимального размера flex элемента.*/

html {
    font-family: sans-serif;
}

body {
    margin: 0;
}

header {
    background: rgb(223, 115, 28);
    height: 100px;
}

h1 {
    text-align: center;
    color: white;
    line-height: 100px;
    margin: 0;
}

article {
    padding: 10px;
    margin: 10px;
    background: rgb(30, 179, 37);
}

/*-------------------------------------------------------------------------------------------------------------*/

section {
    /* width: 2000px;
    height: 500px;
    border: 1px red solid; */

    display: flex;
    flex-direction: row;

    flex-wrap: wrap;
}

article {
    flex: 1;
}

article:nth-of-type(3) {
    flex: 2;
}