'use strict';

/*-------------------------------------------------------------------------------------------------------------------*/

let obj1 = {
    /*Сокращенная запись создания метода в объекте.*/
    doSomething() {

    }
};

/*-------------------------------------------------------------------------------------------------------------------*/

/*"this" не является фиксированным. В JS "this" является "свободным", его значение вычисляется в момент вызова метода 
и не зависит от того, где этот метод был объявлен, а скорее от того, какой объект вызывает метод.*/

let obj2 = { a: 'obj1' };
let obj3 = { a: 'obj2' };

function doSomething2() {
    console.log(this.a);
};

obj2.doSomething2 = doSomething2;
obj3.doSomething2 = doSomething2;

obj2.doSomething2(); // 'obj1'
obj3.doSomething2(); // 'obj2'

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

function doSomething3() {
    console.log(this);
};

doSomething3(); // в строгом режиме undefined, не в строгом режиме глобальный объект "Window".

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*У стрелочных функций нет "this". Если мы ссылаемся на "this" внутри такой функции, то оно берется из внешней 
нестрелочной функции. Это особенность стрелочных функций полезна, когда мы на самом деле не хотим иметь отдельное 
"this", а скорее хотим взять его из внешнего контекста.*/

let obj5 = {
    a: 'xyz',

    arrowFunction: () => {
        console.log(this);
    },

    doSomething6() {
        console.log(this);
    }
};

let obj4 = {
    a: 'abc',

    doSomething3() {
        /*У стрелочных функций нет собственного контекста "this". Если мы ссылаемся на "this" внутри такой функции, 
        то оно берется из первой внешней нестрелочной функции.*/
        let arrowFunction = () => console.log(this.a);

        /*Здесь, при использовании Functional Expression, "this" ни на что не ссылается, то есть равен "undefined", 
        а у него нет свойства "a".*/
        // let arrowFunction = function () { console.log(this.a) };

        arrowFunction();
    },

    doSomething4() {
        let arrowFunction = () => {
            let arrowFunction2 = () => {
                console.log(this.a);
            };

            arrowFunction2();
        };

        arrowFunction();
    },

    doSomething5() {
        obj5.arrowFunction();
    }
};

obj4.doSomething3(); /*'abc', стрелочная функция взяла контекст внешней функции "doSomething3()", то есть объект 
"obj4".*/
obj4.doSomething4(); /*'abc', стрелочная функция "arrowFunction2()" сначала посмотрела на ближнюю для себя внешнюю
функцию "arrowFunction()", но она оказалась стрелочной, поэтому пошла дальше и посмотрела на следующую внешнюю функцию
в цепочке функций, то есть на нестрелочную функцию "doSomething4()", и взяла ее контекст, то есть объект "obj4".*/

obj4.doSomething5(); /*Глобальный объект "Window", так как это контекст некой глобальной функции, которая запускает 
изначально весь код.*/
obj5.arrowFunction(); // Глобальный объект "Window" по той же причине.

obj5.doSomething6(); // объект "obj3", так как вызываем нестрелочную функцию в объекте "obj5".

let obj6 = {
    a: 'aa',

    obj7: {
        a: 'bb',

        arrowFunction: () => {
            console.log(this);
        }
    }
};

obj6.obj7.arrowFunction(); /*Глобальный объект "Window", так как стрелочная функция "arrowFunction()" не посмотрит
на объекты, в которых она находится, то есть на "obj7" и "obj8", поскольку они не являются функциями, а посмотрит
на некую глобальную функцию, которая запускает изначально весь код и возьмет ее контекст вызова.*/


/*В итоге можно сказать, что стрелочная функция ищет контекст "this" во внешних функциях по цепочке функций,
в которой была вызвана, от ближней к дальним по порядку до тех пор, пока не встретит какую-либо нестрелочную 
функцию и после этого возьмет ее контекст вызова.*/