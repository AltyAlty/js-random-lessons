/*-------------------------------------------------------------------------------------------------------------*/
/*Эта функция возвращает промис. Как и любой промис, промис в этой функции запустить функцию-исполнитель в
момент своего создания. В нашем случае запуститься метод "setTimeout()", который зарезольвит промис через
указанное количество времени.*/
const delay = (ms) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve();
        }, ms);
    });
};

/*Ключевое слово "async" говорит о том, что какая-то функция всегда возвращает промис. Значения других типов 
оборачиваются в завершившийся успешно промис автоматически.

Ключевое слово "await" заставит интерпретатор JavaScript ждать до тех пор, пока промис справа от await 
не выполнится. После чего оно вернет его результат, и выполнение кода продолжится. await можно использовать 
только внутри async-функций.

Данная функция вызывает сначала указанную выше функцию "delay()", благодаря которой появиться задержка,
так как мы используем здесь await. А далее после задержки будет запущена какая-то другая функция, которую
мы укажем вторым параметром, с параметром, который мы укажем третьим параметром.*/
const doSomethingAfterDelay = async (ms, f, txt) => {
    await delay(ms);
    f(txt);
};

console.log('ouside1');

doSomethingAfterDelay(2000, console.log, 'inside');

console.log('ouside2');

// ouside1
// ouside2
// inside