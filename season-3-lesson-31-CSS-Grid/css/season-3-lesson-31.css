* {
    margin: 0;
    padding: 0;
}

/*-------------------------------------------------------------------------------------------------------------*/

/*Для использования Grid нужен родительский элемент для grid элементов, некий grid контейнер. Для того, чтобы
создать такой контейнер, нужно использовать свойство "display" со значение "grid" для block grid или
со значением "inline-grid" для inline grid.

Свойство "grid-template-columns" позволяет указывать количество и размеры столбцов в grid.

Свойство "grid-template-rows" позволяет указывать количество и размеры строк в grid.

Свойство "grid-template" комбинирует работу свойств "grid-template-rows" и "grid-template-columns".

При помощи CSS-функции "minmax()" можно указать минимальный и максимальный размер строки или столбца.
Например, "minmax(100px, 200px)" укажет, что столбец будет занимать если ему будет позволено 200px, но если 
мы удем уменьшать размера окна, то этот столбец может сузиться до 100px.

Свойство "grid-column-gap" позволяет добавить пропуски между столбцами в grid.

Свойство "grid-row-gap" позволяет добавить пропуски между строками в grid.

Свойство "grid-gap" комбинирует работу свойств "grid-row-gap" и "grid-column-gap".

Свойства "grid-row-start" и "grid-row-end" позволяют grid элементу охватывать несколько строк.
Заданые пропуски между строк будут включены в этот элемент.
Свойство "grid-row" комбинирует работу свойств "grid-row-start" и "grid-row-end".
Свойства "grid-column-start" и "grid-column-end" позволяют grid элементу охватывать несколько стобцов.
Заданые пропуски между строк будут включены в этот элемент.
Свойство "grid-column" комбинирует работу свойств "grid-column-start" и "grid-column-end".
В свойствах "grid-row-end", "grid-row", "grid-column-end" и "grid-column" можно использовать "span", чтобы
указать сколько строк или столбцов нужно охватить от указанного начала, например, "span 2".
Свойство "grid-area" комбинирует работу свойств "grid-row-start", "grid-column-start", "grid-row-end" и 
"grid-column-end".

Свойство "grid-template-areas" позволяет именовать секции в grid, чтобы использовать эти секции по заданным 
именам в качестве значений для свойства "grid-area".

Свойство "justify-items" выравнивает grid элементы по оси строк слева направо. Значение "start" выравнивает
по левой стороне. Значение "end" выравнивает по правой стороне. Значение "center" выравнивает по центру.
Значение "stretch" делает так, что все grid элементы занимают все доступную им ширину. Все значения кроме
"stretch", делают так, чтобы grid элементы, если у них не задано свойство "width", занимали такую ширину, 
которая им необходима для вмещения их контента. Если нужно указать какое-то отдельное выравнивание для 
какого-то отдельного элемента, то нужно в нем использовать свойство "justify-self".

Если в grid есть незанятое пространство, то свойство "justify-content" может позиционировать целые столбцы
по оси строк. Значение "start" выравнивает столбцы к левой стороне контейнера. Значение "end" выравнивает 
столбцы к правой стороне контейнера. Значение "center" центрирует столбцы горизонтально в контейнере. Значение 
"stretch" растягивает столбцы так, чтобы заполнить весь контейнер. Значение "space-around" добавляет равное 
количество пространства на каждой стороне каждого столбца. Значение "space-between" добавляет равное количество
пространства на каждой стороне каждого столбца за исключением пространства перед первым столбцом и после 
последнего столбца. Значение "space-evenly" добавляет равное количество пространства между столбцами, не 
исключая пространства перед первым столбцом и после последнего столбца.

Свойство "align-items" выравнивает grid элементы по оси столбцов сверху вниз. Значение "start" выравнивает
по верхней стороне. Значение "end" выравнивает по нижней стороне. Значение "center" выравнивает по центру.
Значение "stretch" делает так, что все grid элементы занимают все доступную им высоту. Все значения кроме
"stretch", делают так, чтобы grid элементы, если у них не задано свойство "height", занимали такую высоту, 
которая им необходима для вмещения их контента. Если нужно указать какое-то отдельное выравнивание для 
какого-то отдельного элемента, то нужно в нем использовать свойство "align-self".

Если в grid есть незанятое пространство, то свойство "align-content" может позиционировать целые строки
по оси столбцов. Значение "start" выравнивает строки к верхней стороне контейнера. Значение "end" выравнивает 
строки к нижней стороне контейнера. Значение "center" центрирует строки вертикально в контейнере. Значение 
"stretch" растягивает строки так, чтобы заполнить весь контейнер. Значение "space-around" добавляет равное 
количество пространства на каждой стороне каждой строки. Значение "space-between" добавляет равное количество
пространства на каждой стороне каждой строки за исключением пространства перед первой строкой и после 
последней строки. Значение "space-evenly" добавляет равное количество пространства между строками, не 
исключая пространства перед первой строкой и после последней строки.

Неявный grid это алгоритм, встроенный в спецификацию CSS Grid, который определяет поведение размещения
grid элементов, когда их больше, чем вмещается в grid, указанный в CSS. Стандартное поведения неявного
grid: grid элементы заполняют новые строки, добавляя новые строки по необходимости, новые строки будут
иметь высоту достаточную, чтобы вместить свой контент. Свойство "grid-auto-rows" позволяет указать
высоту неявно-добавленных строк. Также grid элементы заполняют новые столбцы, добавляя новые столбцы по 
необходимости, новые стобцы будут иметь ширину достаточную, чтобы вместить свой контент. Свойство 
"grid-auto-columns" позволяет указать ширину неявно-добавленных столбцов.

Свойство "grid-auto-flow" указывает должны ли новые grid-элементы добавляться в строки или в столбцы.
Значение "row" указывает, что новые grid элементы будут заполнять строки слева направо и создавать
новые строки, если уже существует слишком много grid элементов (значение по умолчанию). Значение "column" 
указывает, что новые grid элементы будут заполнять столбцы сверху вниз и создавать новые столбцы, если 
уже существует слишком много grid элементов. Значение "dense" указывает, что алгоритм автоматического
размещения использует "плотный" алгоритм размещения grid элементов, который будет пытаться заполнить
ранее образованные пустоты в grid, что может привести к появлению grid элементов не в порядке их
указания, хоть при этом и будут заполняться пустоты, оставленные бОльшими grid-элементами. Значение
"dense" можно комбинировать со значениями "row" или "column". Если значение "dense" не используется, то
будет использоваться "разряженный" алгоритм, который будет размещать grid элементы, не пытаясь заполнить
ранее образованные пустоты в grid, что будет гарантировать, что все автоматически размещенные grid
элементы будут расположены по порядку.*/

.grid-container {
    display: grid;
    /* width: 1000px; */
    margin-left: 20%;
    margin-right: 20%;
    margin-top: 5%;
    height: 500px;
    border: 1px red solid;

    grid-template-rows: 2fr 2fr 2fr 2fr 2fr 2fr 2fr;
    grid-template-columns: 4fr 6fr 1fr 1fr 2fr;    
    /* grid-template: 2fr 2fr 2fr 2fr 2fr 2fr 2fr / 4fr 6fr 1fr 1fr 2fr; */
    /* grid-template: repeat(7, 2fr) / 4fr 6fr 1fr 1fr 2fr; */

    grid-row-gap: 10px;
    grid-column-gap: 5px;
    /* grid-gap: 10px 5px; */

    grid-template-areas:
        "header header header header header"
        "menu-item-01 main-content main-content main-content additional-info"
        "menu-item-02 main-content main-content main-content additional-info"
        "menu-item-03 main-content main-content main-content additional-info"
        "menu-item-04 additional-content additional-content additional-content additional-info"
        "menu-item-05 additional-content additional-content additional-content additional-info"
        "footer footer footer footer footer";

    justify-items: stretch;
    align-items: stretch;

    /*Это для проверки свойств "justify-content" и "align-content". Нужно также скрыть элементы с
    классами "secret-div-01" и "secret-div-02"*/
    /* grid-template-rows: 60px 60px 60px 60px 60px 60px 60px;
    grid-template-columns: 200px 400px 100px 100px 100px;
    justify-content: center;
    align-content: center; */

    grid-auto-rows: 1fr;
    grid-auto-columns: 1fr;
}

header {
    grid-area: header;
    border: 1px red solid;
    margin-bottom: 20px;
}

.menu-item-01 {
    grid-area: menu-item-01;
    border: 1px green solid;
}

.menu-item-02 {
    grid-area: menu-item-02;
    border: 1px green solid;
}

.menu-item-03 {
    grid-area: menu-item-03;
    border: 1px green solid;
}

.menu-item-04 {
    grid-area: menu-item-04;
    border: 1px green solid;
}

.menu-item-05 {
    grid-area: menu-item-05;
    border: 1px green solid;
}

.main-content {
    grid-area: main-content;
    border: 1px blue solid;
    margin-left: 20px;

    /* grid-row-start: 3;
    grid-row-end: 6;

    grid-column-start: 3;
    grid-column-end: 4; */
}

.additional-info {
    grid-area: additional-info;
    border: 1px yellow solid;
    margin-left: 20px;
}

.additional-content {
    grid-area: additional-content;
    border: 1px rgb(205, 94, 50) solid;
    margin-left: 20px;
}

footer {
    grid-area: footer;
    border: 1px rgb(0, 255, 234) solid;
    margin-top: 20px;
}

/*Для наложения элементов друг на друга, то есть их перекрытия, можно использовать свойство "grid-area",
указывая в нем 4 значения для охвата области:
с какой строки / с какого столбца / до какой строки (не включительно) / до какого столбца (не включительно).*/
.main-content-additional-content-link {
    grid-area: 4 / 3 / 6 / 5;
    border: 1px rgb(138, 56, 131) solid;
    background-color: rgb(138, 56, 131);
    z-index: 1;
}

.secret-div-01 {
    grid-area: 8 / 1 / 10 / 6;
    border: 1px rgb(144, 150, 88) solid;
    text-align: center;
}

.secret-div-02 {
    grid-area: 1 / 6 / 10 / 8;
    border: 1px rgb(144, 150, 88) solid;
    text-align: center;
}