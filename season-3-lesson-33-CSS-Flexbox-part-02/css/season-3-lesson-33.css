html {
    font-family: sans-serif;
}

body {
    width: 70%;
    max-width: 960px;
    margin: 20px auto;
}

button {
    font-size: 18px;
    line-height: 1.5;
    width: 15%;
}

div {
    height: 100px;
    border: 1px solid black;
}

/*-------------------------------------------------------------------------------------------------------------------*/

/*Свойство "align-items" контролирует, где на поперечной оси находятся flex элементы. По умолчанию стоит значение
"stretch", которое растягивает все flex элементы, чтобы заполнить родителя вдоль поперечной оси. Если у родителя нет
фиксированной ширины вдоль поперечной оси, все flex элементы примут длину самого длинного flex элемента. Значение
"center" заставляет элементы сохранять свои собственные размеры, но центрирует их вдоль поперечной оси. Вот почему
кнопки текущего примера центрированы по вертикали. Также есть значения "flex-start" и "flex-end", которые выравнивают
все элементы по началу и концу поперечной оси соответственно.

Свойство "justify-content" контролирует, где flex элементы располагаются на главной оси. По умолчанию стоит значение
"flex-start", которое располагает все элементы в начале главной оси. Также можно использовать значение "flex-end", чтобы
расположить их в конце. Значение "center" располагает все элементы по центру главной оси. Значение "space-around"
распределяет все элементы равномерно по главной оси, с небольшим количеством свободного места на обоих концах. Значение
"space-between" очень похоже на значение "space-around", за исключением того, что оно не оставляет места на обоих
концах.*/
div {
    display: flex;
    align-items: center;
    justify-content: space-around;
}

/*Можно переопределить свойство "align-items" для отдельных flex элементов, применив свойство "align-self" к ним.
Псевдо-элемент "first-child" находит любой элемент, являющийся первым в своем родителе.*/
/* button:first-child {
    align-self: flex-end;
} */


/*В flexbox также есть возможность менять порядок расположения flex элементов, не влияя на исходный порядок. Для этого
нужно использовать свойство "order". По умолчанию все flex элементы имеют значение свойства "order" равное 0. Flex
элементы с установленными на них бОльшими значениями будут отображаться позже в порядке отображения, чем элементы с
меньшими значениями порядка. Flex элементы с одинаковым значением порядка будут отображаться в исходном порядке. Можно
установить отрицательные значения, чтобы элементы отображались раньше, чем элементы с установленным значением 0*/
button:first-child {
    order: 1;
}